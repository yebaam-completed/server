
antes de todo:  Credenciales apis y servicios en google Cloud
   1 Crear cuenta de servicio y rol Artifact registry opcion: LEctor de Artifact registry
   2 crear las claves JSON
    3 crear secreto local  kubectl create secret docker-registry ejemplo --docker-server=northamerica-northeast1-docker.pkg.dev --docker-username=_json_key --docker-password="$(cat /c/projects/yebaam/server/k8s/keys/server-main-422100-49cf62e1851f.json)"  --docker-email=jimocano@gmail.com

4 kubectl patch serviceaccounts default -p '{ "imagePullSecrets": [{ "name":"gcr-json-key" }] }'

 5 kubectl rollout restart deployment


# Helm commands

* Crear configuración `helm create <nombre>`
* Aplicar configuración inicial: `helm install <nombre> .`
* Aplicar actualizaciones: `helm upgrade <nombre> .`

# K8s commands

* Obtener pods, deployments y services: `kubectl get <pods | deployments | services>`
* Revisar todos pods: `kubectl describe pods`
* Revisar un pod: `kubectl describe pod <nombre>`
* Eliminar pod: `kubectl delete pod <nombre>`
* Revisar logs: `kubectl logs <nombre>`



# Crear deployment:
```
kubectl create deployment <nombre> --image=<registro/url/imagen> --dry-run=client -o yaml > deployment.yml
ejemplo:  flowe@FLOW MINGW64 /c/projects/yebaam/server/k8s (main)
$ kubectl create deployment api-server  --image=northamerica-northeast1-docker.pkg.dev/server-main-422100/main-server-images-repository/server-main --dry-run=client -o yaml > deployment.yml
```

otro kubectl create deployment api-server --image=southamerica-east1-docker.pkg.dev/server-main-422100/imagesregistry/main-server:latest --dry-run=client -o yaml > deployment.yml

# Crear service
```
kubectl create service clusterip <nombre> --tcp=<8888> --dry-run=client -o yaml > service.yml 
**kubectl create service nodeport client-api-server --tcp=4000 --dry-run=client -o yaml > service.yml**
```
* **clusterip**: solo se puede acceder desde dentro del cluster
* **nodeport**: se puede acceder desde fuera del cluster

 
# Secrets

* Crear secretos, varios a la vez, o uno por uno.
```
kubectl create secret generic <nombre> --from-literal=key=value

kubectl create secret docker-registry secret1 --from-literal=key1=value1 --from-literal=key2=value2
```
* Obtener los secretos `kubectl get secrets`
* Ver el contenido de un secreto `kubectl get secrets <nombre> -o yaml`

## Editar un secret
La forma más fácil es borrarlo y volverlo a crear pero si es más de un secret, no vamos a querer perder los demás.
Recordar que los secrets están en `base64`, por lo que si queremos editar un secret, debemos hacerlo en `base64`.

1. Editar el secret con `kubectl edit secret <nombre>` esto invocará el editor
2. Cambiar el valor (se puede usar un editor en [línea para convertir a base64](https://www.rapidtables.com/web/tools/base64-decode.html))
3. Tocar **i** para insertar líneas y editar el archivo
4. Poner el valor a decodificar en una nueva línea
5. Presionar **esc** y luego `:. ! base64 -D` para decodificar el valor
6. Presionar **i** para insertar o editar el valor
7. Presionar **esc** y luego `:. ! base64` para codificar el valor
8. Editar nuevamente el archivo **i** y dejar la línea en su posición
9. Presionar **esc** y luego **:wq** para guardar y salir



## Configurar secretos de Google Cloud para obtener las imágenes

1. Crear secreto:
```
kubectl create secret docker-registry gcr-json-key --docker-server=southamerica-east1-docker.pkg.dev --docker-username=_json_key --docker-password="$(cat 'C:\projects\yebaam\server\k8s\keys\server-main-422100-8fee5a7bba34.json')" --docker-email=jimocano@gmail.com

```

2. Path del secreto para que use la llave:
```
 para verificar la creacion kubectl get secrets
 kubectl patch serviceaccounts default -p '{ "imagePullSecrets": [{ "name":"gcr-json-key" }] }'

kubectl rollout restart deployment

ejemplos
kubectl get pods

kubectl describe pod api-server-56844cb6f9-njx9f

kubectl exec <nombre-del-pod> -- env

```


## Exportar y aplicar configuraciones con archivos (secrets en este caso)
* Para exportar los archivos de configuración

```
kubectl get secret <nombre> -o yaml > <nombre>.yml
```

* Aplicar la configuración basado en el archivo
```
kubectl create -f <nombre>.yml
```


para colocar las variables manuales

kubectl logs <nombre-del-pod>


kubectl set env deployment/<nombre-del-deployment> \
PORT=4000 \
DATABASE_URL='mongodb+srv://...db_main' \
JWT_TOKEN='mamasitas.com' \
NODE_ENV=development \
SECRET_KEY_ONE='...' \
SECRET_KEY_TWO='...' \
CLIENT_URL='http://localhost:3000' \
API_URL='https://api.dev.serversocial.xyz/api/v1' \
REDIS_HOST='...' \
CLOUD_NAME='dzqpacupf' \
CLOUD_API_KEY='372698151483913' \
CLOUD_API_SECRET='...' \
SENDER_EMAIL='...' \
SENDER_EMAIL_PASSWORD='...' \
SENDGRID_API_KEY='SG...' \
SENDGRID_SENDER='...'

kubectl rollout restart deployment <nombre-del-deployment>
kubectl describe deployment api-server
kubectl get pods
